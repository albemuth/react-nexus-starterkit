"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");var __DEV__ = (process.env.NODE_ENV !== "production");
/* jshint ignore:start */
// Escape double-quotes
var X = function (x) {
  return x.replace(/\"/g, "\\\"");
};

module.exports = function (_ref) {
  var title = _ref.title;
  var description = _ref.description;
  var canonical = _ref.canonical;
  var lang = _ref.lang;
  var rootHtml = _ref.rootHtml;
  var serializedFlux = _ref.serializedFlux;
  var serializedHeaders = _ref.serializedHeaders;
  var guid = _ref.guid;
  return "<!DOCTYPE html" + (lang ? " lang=\"" + X(lang) + "\"" : "") + ">\n  <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n      " + (description ? "<meta name=\"description\" content=\"" + X(description) + "\">" : "") + "\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      <title>" + (title || "") + "</title>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"/p" + (__DEV__ ? "" : ".min") + ".css\">\n      <link href='http://fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css'>\n      <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300' rel='stylesheet' type='text/css'>\n      <link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>\n    </head>\n    <body>\n      <div id=\"__ReactNexusRoot\">\n        " + rootHtml + "\n      </div>\n      <script type=\"text/javascript\">\n        (function(w, d, i, f, h, g) {\n          w.__ReactNexus = { serializedFlux: f, serializedHeaders: h, guid: g, rootElement: d.getElementById(i) };\n        }(window, document, '__ReactNexusRoot', '" + serializedFlux + "', '" + serializedHeaders + "', '" + guid + "'))\n      </script>\n      <script type=\"text/javascript\" src=\"/p" + (__DEV__ ? "" : ".min") + ".js\"></script>\n    </body>\n  </html>\n  ";
};
/* jshint ignore:end */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxBQUFDLElBQU0sT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssWUFBWSxDQUFDLENBQUM7OztBQUc3RixJQUFNLENBQUMsR0FBRyxVQUFDLENBQUM7U0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFLLENBQUM7Q0FBQSxDQUFDOztBQUV6QyxNQUFNLENBQUMsT0FBTyxHQUFHO01BQUcsS0FBSyxRQUFMLEtBQUs7TUFBRSxXQUFXLFFBQVgsV0FBVztNQUFFLFNBQVMsUUFBVCxTQUFTO01BQUUsSUFBSSxRQUFKLElBQUk7TUFBRSxRQUFRLFFBQVIsUUFBUTtNQUFFLGNBQWMsUUFBZCxjQUFjO01BQUUsaUJBQWlCLFFBQWpCLGlCQUFpQjtNQUFFLElBQUksUUFBSixJQUFJOzRCQUN2RixDQUFBLElBQUksZ0JBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFNLEVBQUUsQ0FBQSx3SUFLM0MsQ0FBQSxXQUFXLDZDQUF3QyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQU8sRUFBRSxDQUFBLHdHQUduRSxLQUFLLElBQUksRUFBRSw2RUFDNkIsQ0FBQSxPQUFPLEdBQUcsRUFBRSxHQUFFLE1BQU0sQ0FBQSx1WkFPakUsUUFBUSw2UUFNaUMsY0FBYyxZQUFPLGlCQUFpQixZQUFPLElBQUksNkVBRXRELENBQUEsT0FBTyxHQUFHLEVBQUUsR0FBRSxNQUFNLENBQUE7Q0FHL0QsQ0FBQyIsImZpbGUiOiJ0ZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi9cbi8vIEVzY2FwZSBkb3VibGUtcXVvdGVzXG5jb25zdCBYID0gKHgpID0+IHgucmVwbGFjZSgvXFxcIi9nLCAnXFxcXFwiJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBjYW5vbmljYWwsIGxhbmcsIHJvb3RIdG1sLCBzZXJpYWxpemVkRmx1eCwgc2VyaWFsaXplZEhlYWRlcnMsIGd1aWQgfSkgPT5cbiAgYDwhRE9DVFlQRSBodG1sJHtsYW5nID8gYCBsYW5nPVwiJHtYKGxhbmcpfVwiYCA6ICcnfT5cbiAgPGh0bWw+XG4gICAgPGhlYWQ+XG4gICAgICA8bWV0YSBjaGFyc2V0PVwidXRmLThcIj5cbiAgICAgIDxtZXRhIGh0dHAtZXF1aXY9XCJYLVVBLUNvbXBhdGlibGVcIiBjb250ZW50PVwiSUU9ZWRnZVwiPlxuICAgICAgJHtkZXNjcmlwdGlvbiA/IGA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PVwiJHtYKGRlc2NyaXB0aW9uKX1cIj5gIDogJyd9XG4gICAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTFcIj5cbiAgICAgIDx0aXRsZT4ke3RpdGxlIHx8IFwiXCJ9PC90aXRsZT5cbiAgICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIiBocmVmPVwiL3Ake19fREVWX18gPyAnJzogJy5taW4nfS5jc3NcIj5cbiAgICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90bycgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+XG4gICAgICA8bGluayBocmVmPSdodHRwOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1PcGVuK1NhbnMrQ29uZGVuc2VkOjMwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+XG4gICAgICA8bGluayBocmVmPSdodHRwOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1PcGVuK1NhbnMnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPlxuICAgIDwvaGVhZD5cbiAgICA8Ym9keT5cbiAgICAgIDxkaXYgaWQ9XCJfX1JlYWN0TmV4dXNSb290XCI+XG4gICAgICAgICR7cm9vdEh0bWx9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuICAgICAgICAoZnVuY3Rpb24odywgZCwgaSwgZiwgaCwgZykge1xuICAgICAgICAgIHcuX19SZWFjdE5leHVzID0geyBzZXJpYWxpemVkRmx1eDogZiwgc2VyaWFsaXplZEhlYWRlcnM6IGgsIGd1aWQ6IGcsIHJvb3RFbGVtZW50OiBkLmdldEVsZW1lbnRCeUlkKGkpIH07XG4gICAgICAgIH0od2luZG93LCBkb2N1bWVudCwgJ19fUmVhY3ROZXh1c1Jvb3QnLCAnJHtzZXJpYWxpemVkRmx1eH0nLCAnJHtzZXJpYWxpemVkSGVhZGVyc30nLCAnJHtndWlkfScpKVxuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBzcmM9XCIvcCR7X19ERVZfXyA/ICcnOiAnLm1pbid9LmpzXCI+PC9zY3JpcHQ+XG4gICAgPC9ib2R5PlxuICA8L2h0bWw+XG4gIGA7XG4vKiBqc2hpbnQgaWdub3JlOmVuZCAqL1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9